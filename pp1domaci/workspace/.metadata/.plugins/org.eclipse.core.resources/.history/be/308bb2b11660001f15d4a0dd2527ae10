package rs.ac.bg.etf.pp1;

import org.apache.log4j.Logger;

import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

public class SemanticPass extends VisitorAdaptor {
	int printCallCount = 0;
	int varDeclCnt = 0;
	boolean errorDetected = false;
	Obj currentMethod = null;
	
	Logger log = Logger.getLogger(getClass());
	

	public boolean passed(){
        return !errorDetected;
    }
	
	public void report_info(String message, SyntaxNode info) {
        StringBuilder msg = new StringBuilder(message);
        int line = (info == null) ? 0 : info.getLine();
        if (line != 0)
            msg.append(" on line ").append(line);
        log.info(msg.toString());
    }

    public void report_error(String message, SyntaxNode info) {
        errorDetected = true;
        StringBuilder msg = new StringBuilder(message);
        int line = (info == null) ? 0 : info.getLine();
        if (line != 0)
            msg.append(" on line").append(line);
        log.error(msg.toString());
    }

	
	public void visit(VarDecl vardecl) { 
		varDeclCnt++;
		VarList vardecl_list = vardecl.getVarList();
		
		while(vardecl_list instanceof VarListMany) {
			VarListMany varlist_many = (VarListMany) vardecl_list;
			
			VarType var_type = varlist_many.getVarType();
			VarArrayOpt var_array_opt = var_type.getVarArrayOpt();
			
			
			if(var_array_opt instanceof VarNoArray) {
				
				Obj var_node = Tab.insert(Obj.Var, var_type.getName(), vardecl.getType().struct);
			}
			else {
				Struct s = new Struct(Struct.Array, vardecl.getType().struct);
				Obj var_node = Tab.insert(Obj.Var, var_type.getName(), s);
			}
			
			vardecl_list = varlist_many.getVarList();
		}
		
		if(vardecl_list instanceof VarListOne){
			VarType var_type = ((VarListOne) vardecl_list).getVarType();
			VarArrayOpt var_array_opt = var_type.getVarArrayOpt();
			
			if(var_array_opt instanceof VarNoArray) {
				Obj var_node = Tab.insert(Obj.Var, var_type.getName(), vardecl.getType().struct);
			}
			else {
				Struct s = new Struct(Struct.Array, vardecl.getType().struct);
				Obj var_node = Tab.insert(Obj.Var, var_type.getName(), s);
			}
		}
			
	}
	
	public void visit(Type type) {
		Obj type_node = Tab.find(type.getI1());
		
		if(type_node == Tab.noObj) {
			report_error("Nije pronadjen tip " + type.getI1() + " u tabeli simbola! ", null);
			type.struct = Tab.noType;
		}
		else {
			if(Obj.Type == type_node.getKind()) {
				type.struct = type_node.getType();
			}
			else {
				report_error("Greska: Ime " + type.getI1() + " ne predstavlja tip!", type);
				type.struct = Tab.noType;
			}
		}
	}
	
	public void visit(ConstDecl constdecl) {
		
		ConstList const_list = constdecl.getConstList();
		
		while(const_list instanceof ConstListMany) {
			ConstListMany const_list_many = (ConstListMany) const_list;
			
			ConstDef const_def = const_list_many.getConstDef();
			
			Obj const_node = Tab.insert(Obj.Con, const_def.getI1(), constdecl.getType().struct);
			
			const_list = constdecl.getConstList();
		}
		
		if(const_list instanceof ConstListOne) {
			ConstListOne const_list_one = (ConstListOne) const_list;
			
			ConstDef const_def = const_list_one.getConstDef();
			
			Obj const_node = Tab.insert(Obj.Con, const_def.getI1(), constdecl.getType().struct);
			
		}
	}
	
	public void visit(ConstNumber visitor) {
		visitor.struct = MyTab.intType;
	}
	
	public void visit(ConstBool visitor) {
		visitor.struct = MyTab.boolType;
	}
	
	public void visit(ConstChar visitor) {
		visitor.struct = MyTab.charType;
	}
	
	public void visit(ProgName progName) {
		progName.obj = Tab.insert(Obj.Prog, progName.getProgName(), Tab.noType);
		Tab.openScope();
	}
	
	public void visit(Program program) {
		Tab.chainLocalSymbols(program.getProgName().obj);
		Tab.closeScope();
	}
	
	public void visit(MainMethod mainmethod) {
		currentMethod = Tab.insert(Obj.Meth, "main", Tab.noType);
		Tab.openScope();
		
		report_info("Obradjuje se funkija main", mainmethod);
	}
	
	public void visit(MethodDecl methoddecl) {
		Tab.chainLocalSymbols(currentMethod);
		Tab.closeScope();
		
		currentMethod = null;
	}
	
	public void visit(Designator designator) {
		Obj obj = MyTab.find(designator.getName());
		
		if(obj == MyTab.noObj) {
			report_error("Greska na liniji " + designator.getLine() + " : ime " + designator.getName() + " nije deklarisano!", null);
		}
		
		designator.obj = obj;
	}
	
	public void visit(DesignatorPart visitor) {
		
	}
	
	private boolean compatibility(Struct dst, Struct src) {
		if(dst.getKind() == Struct.Array){
			dst = dst.getElemType();
		}
		if(src.getKind() == Struct.Array) {
			src = src.getElemType();
		}
		
		return dst == src;
	}
	
	
	public void visit(Assignment assignment) {
		Struct dest_type = assignment.getDesignator().obj.getType();
		Struct expr_type = assignment.getExpr().struct;
	
		
		if(!compatibility(dest_type, expr_type)) {
			report_error("Greska na liniji " + assignment.getLine() + ": Tipovi moraju biti isti! ", null);	
		}
	}
	
	public void visit(PlusPlusStmt visitor) {
		Obj designator = visitor.getDesignator().obj;
		
		if(designator.getType() != MyTab.intType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Operand mora biti tipa int! ", null);
		}
	}
	
	public void visit(MinusMinusStmt visitor) {
		Obj designator = visitor.getDesignator().obj;
		
		if(designator.getType() != MyTab.intType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Operand mora biti tipa int! ", null);
		}
	}
	
	public void visit(PrintStmt visitor) { 
		if(visitor.getExpr().struct != MyTab.intType && visitor.getExpr().struct != MyTab.charType && visitor.getExpr().struct != MyTab.boolType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Argument mora biti int, char ili bool ", null);
		}
	}
	
	public void visit(ReadStmt visitor) {
		if(visitor.getExpr().struct != MyTab.intType && visitor.getExpr().struct != MyTab.charType && visitor.getExpr().struct != MyTab.boolType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Argument mora biti int, char ili bool ", null);
		}
	}
	
	public void visit(AddExpr visitor) {
		visitor.struct = visitor.getTerm().struct;
		
		log.info(visitor.getExpr().struct);
		log.info(visitor.getTerm().struct);
		
		log.info(visitor.getExpr());
		log.info(visitor.getTerm());
		// provera da li su i leva i desna strana int
		if(visitor.getExpr().struct != MyTab.intType || visitor.getTerm().struct != MyTab.intType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Operandi moraju biti tipa int! ", null);
		}
	}
	
	public void visit(NegTermExpr visitor) {
		visitor.struct = visitor.getTerm().struct;
		
		if(visitor.getTerm().struct != MyTab.intType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Operand mora biti tipa int! ", null);
		}
	}
	
	public void visit(TermExpr termexpr) {
		termexpr.struct = termexpr.getTerm().struct;
	}
	
	public void visit(CommonTerm commonterm) {
		commonterm.struct = commonterm.getFactor().struct;
	}
	
	public void visit(MulopTerm visitor) {
		visitor.struct = visitor.getFactor().struct;
		
		if(visitor.getTerm().struct != MyTab.intType || visitor.getFactor().struct != MyTab.intType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Operandi moraju biti tipa int! ", null);
		}
	}
	
	public void visit(Const visitor) {
		visitor.struct = MyTab.intType;
	}
	
	public void visit(FactorBool visitor) {
		visitor.struct = MyTab.boolType;
	}
	
	public void visit(FactorChar visitor) {
		visitor.struct = MyTab.charType;
	}
	
	public void visit(Var visitor) {
		visitor.struct = visitor.getDesignator().obj.getType();
	}
	
	public void visit(NewExpr visitor) {
		visitor.struct = visitor.getType().struct;
		
		if(visitor.getType().struct != MyTab.intType && visitor.getType().struct != MyTab.charType && visitor.getType().struct != MyTab.boolType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Tip mora biti tipa int, char ili bool! ", null);
		}
		
		log.info(visitor.getExpr().struct.getElemType());
		log.info(MyTab.intType);
		
		if(visitor.getExpr().struct.getElemType() == MyTab.intType) {
			log.info("niz");
		}
		
		if((visitor.getExpr().struct.getKind() == Struct.Array && visitor.getExpr().struct.getElemType() != MyTab.intType)) {
			report_error("Greska na liniji " + visitor.getLine() + ": Duzina niza mora biti tipa int! ", null);
		}
		else if((visitor.getExpr().struct.getKind() != Struct.Array || visitor.getExpr().struct.getElemType() == MyTab.intType) &&
				visitor.getExpr().struct != MyTab.intType) {
			report_error("Greska na liniji " + visitor.getLine() + ": Duzina niza mora biti tipa int! ", null);
		}
	}
	
	public void visit(FactorParen visitor) {
		visitor.struct = visitor.getExpr().struct;
	}
	
}
